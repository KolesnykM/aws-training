AWSTemplateFormatVersion: 2010-09-09
Description: AWS CloudFormation Template

Parameters:
  HashKeyElementName:
    Type: String
    Default: ISBN
    Description: Hash Key Name
  HashKeyElementType:
    Type: String
    Default: S
    Description: Hash Key Type
Resources:
  #---create dynamoDB table-----
  EmployeeTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Books_Descriptions1
      AttributeDefinitions:
        - 
          AttributeName: !Ref HashKeyElementName
          AttributeType: !Ref HashKeyElementType
      KeySchema:
        - 
          AttributeName: !Ref HashKeyElementName
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  #---create SecurityGroup for ec2-----
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: "vpc-ff35a094"
      GroupDescription: "Enable SSH access via port 22"
      SecurityGroupIngress:
        - CidrIp: "0.0.0.0/0"
          Description: "Allowed from anywhere"
          FromPort: "22"
          ToPort: "22"
          IpProtocol: "tcp"
        - CidrIp: "0.0.0.0/0"
          Description: "Allowed from anywhere"
          FromPort: "8443"
          ToPort: "8443"
          IpProtocol: "tcp"
  #---create ec2-----
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      SecurityGroupIds:
        -
          !GetAtt InstanceSecurityGroup.GroupId
      KeyName: 'EC2Keypair'
      ImageId: ami-08962a4068733a2b6
      SubnetId: subnet-a6de62cd
      IamInstanceProfile: !Ref RootInstanceProfile
  #---create role for ec2-----
  RootRole:
    Type: "AWS::IAM::Role"
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  #---create profile for role-----
  RootInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
        Path: "/"
        Roles:
          - Ref: "RootRole"
  #---create s3 -----
  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bucket-from-template-container
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  #---create SQS -----
  MyQueue:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
  #---create role for lambda-----
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AWSLambdaExecute"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
  #---create lambda-----
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3

          def lambda_handler(event, context):
              s3 = boto3.client("s3")

              data = json.loads(event["Records"][0]["body"])
              s3.put_object(Bucket="bucket-from-template-container", Key="data.json", Body=json.dumps(data))
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 3
      MemorySize: 128
  #---create trigger lambda-----
  LambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MyQueue.Arn
      FunctionName: !GetAtt LambdaFunction.Arn

Outputs:
  Employee:
    Description: Table Created using this template.
    Value: !Ref EmployeeTable